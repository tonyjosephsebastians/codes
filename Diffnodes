import { diff_match_patch } from "diff-match-patch";
const dmp = new diff_match_patch();

function diffNodes(node1: Node | null, node2: Node | null, changeIndexRef: {value: number}) {
  // Case 1: both are text nodes
  if (node1?.nodeType === Node.TEXT_NODE && node2?.nodeType === Node.TEXT_NODE) {
    const text1 = node1.textContent || "";
    const text2 = node2.textContent || "";
    if (text1 === text2) return { left: text1, right: text2 };

    const diffs = dmp.diff_main(text1, text2);
    dmp.diff_cleanupSemantic(diffs);

    let left = "", right = "";
    diffs.forEach(([op, data]) => {
      if (op === diff_match_patch.DIFF_EQUAL) {
        left += data;
        right += data;
      } else if (op === diff_match_patch.DIFF_DELETE) {
        left += `<span id="change-${changeIndexRef.value}" class="diff-change bg-red-200">${data}</span>`;
      } else if (op === diff_match_patch.DIFF_INSERT) {
        right += `<span id="change-${changeIndexRef.value}" class="diff-change bg-green-200">${data}</span>`;
      }
    });
    changeIndexRef.value++;
    return { left, right };
  }

  // Case 2: both are elements with same tag
  if (node1?.nodeType === Node.ELEMENT_NODE && node2?.nodeType === Node.ELEMENT_NODE) {
    const el1 = node1 as HTMLElement;
    const el2 = node2 as HTMLElement;
    if (el1.tagName === el2.tagName) {
      const children1 = Array.from(el1.childNodes);
      const children2 = Array.from(el2.childNodes);
      const max = Math.max(children1.length, children2.length);
      let left = `<${el1.tagName.toLowerCase()}>`;
      let right = `<${el2.tagName.toLowerCase()}>`;
      for (let i = 0; i < max; i++) {
        const diffed = diffNodes(children1[i] || null, children2[i] || null, changeIndexRef);
        if (diffed) {
          left += diffed.left;
          right += diffed.right;
        }
      }
      left += `</${el1.tagName.toLowerCase()}>`;
      right += `</${el2.tagName.toLowerCase()}>`;
      return { left, right };
    }
  }

  // Case 3: node exists only on one side
  if (node1 && !node2) {
    return { left: `<span class="diff-change bg-red-200">${(node1 as HTMLElement).outerHTML || node1.textContent}</span>`, right: "" };
  }
  if (!node1 && node2) {
    return { left: "", right: `<span class="diff-change bg-green-200">${(node2 as HTMLElement).outerHTML || node2.textContent}</span>` };
  }

  return null;
}

export function diffHtmlPreserveAll(html1: string, html2: string) {
  const parser = new DOMParser();
  const doc1 = parser.parseFromString(html1, "text/html");
  const doc2 = parser.parseFromString(html2, "text/html");

  const changeIndexRef = { value: 0 };
  const result = diffNodes(doc1.body, doc2.body, changeIndexRef);

  return {
    left: result?.left || "",
    right: result?.right || "",
    hasChanges: changeIndexRef.value > 0,
  };
}
