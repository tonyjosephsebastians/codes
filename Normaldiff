import { diff_match_patch } from "diff-match-patch";

const dmp = new diff_match_patch();

function normalizeText(text: string): string {
  return text
    .trim()
    .replace(/\s+/g, " ")       // collapse multiple spaces/newlines
    .replace(/\s+([.,;:!?])/g, "$1") // fix space before punctuation
    .replace(/([.,;:!?])\s+/g, "$1 "); // ensure one space after punctuation
}

function diffChildren(
  nodes1: NodeListOf<ChildNode>,
  nodes2: NodeListOf<ChildNode>,
  changeIndexRef: { value: number }
): { left: string; right: string } {
  let left = "";
  let right = "";

  const max = Math.max(nodes1.length, nodes2.length);

  for (let i = 0; i < max; i++) {
    const n1 = nodes1[i] || null;
    const n2 = nodes2[i] || null;
    const diffed = diffNodes(n1, n2, changeIndexRef);

    if (diffed) {
      left += diffed.left;
      right += diffed.right;
    }
  }
  return { left, right };
}

function diffNodes(
  node1: Node | null,
  node2: Node | null,
  changeIndexRef: { value: number }
): { left: string; right: string } | null {
  // Case 1: both are text nodes
  if (node1?.nodeType === Node.TEXT_NODE && node2?.nodeType === Node.TEXT_NODE) {
    return diffText(node1.textContent || "", node2.textContent || "", changeIndexRef);
  }

  // Case 2: both are elements
  if (node1?.nodeType === Node.ELEMENT_NODE && node2?.nodeType === Node.ELEMENT_NODE) {
    const el1 = node1 as HTMLElement;
    const el2 = node2 as HTMLElement;

    if (el1.tagName === el2.tagName) {
      // Special case: headings / paragraphs / list items
      if (["P", "LI", "STRONG", "H1", "H2", "H3"].includes(el1.tagName)) {
        const text1 = normalizeText(el1.textContent || "");
        const text2 = normalizeText(el2.textContent || "");
        if (text1 !== text2) {
          const diffed = diffText(text1, text2, changeIndexRef);
          return {
            left: `<${el1.tagName.toLowerCase()}>${diffed.left}</${el1.tagName.toLowerCase()}>`,
            right: `<${el2.tagName.toLowerCase()}>${diffed.right}</${el2.tagName.toLowerCase()}>`,
          };
        }
      }

      // Special handling for table cells
      if (
        ["TD", "TH"].includes(el1.tagName) &&
        el1.childNodes.length === 1 &&
        el1.childNodes[0].nodeType === Node.TEXT_NODE &&
        el2.childNodes.length === 1 &&
        el2.childNodes[0].nodeType === Node.TEXT_NODE
      ) {
        const diffed = diffNodes(el1.childNodes[0], el2.childNodes[0], changeIndexRef);
        return {
          left: `<${el1.tagName.toLowerCase()}>${diffed?.left || ""}</${el1.tagName.toLowerCase()}>`,
          right: `<${el2.tagName.toLowerCase()}>${diffed?.right || ""}</${el2.tagName.toLowerCase()}>`,
        };
      }

      // Default recursion
      const { left, right } = diffChildren(el1.childNodes, el2.childNodes, changeIndexRef);
      return {
        left: `<${el1.tagName.toLowerCase()}>${left}</${el1.tagName.toLowerCase()}>`,
        right: `<${el2.tagName.toLowerCase()}>${right}</${el2.tagName.toLowerCase()}>`,
      };
    }

    // Different tags â†’ wrap
    const left = `<span id="change-${changeIndexRef.value}" class="diff-change bg-red-200">${el1.outerHTML}</span>`;
    const right = `<span id="change-${changeIndexRef.value}" class="diff-change bg-green-200">${el2.outerHTML}</span>`;
    changeIndexRef.value++;
    return { left, right };
  }

  // Case 3: node exists only in left
  if (node1 && !node2) {
    const html = node1.nodeType === Node.ELEMENT_NODE ? (node1 as HTMLElement).outerHTML : node1.textContent || "";
    const left = `<span id="change-${changeIndexRef.value}" class="diff-change bg-red-200">${html}</span>`;
    changeIndexRef.value++;
    return { left, right: "" };
  }

  // Case 4: node exists only in right
  if (!node1 && node2) {
    const html = node2.nodeType === Node.ELEMENT_NODE ? (node2 as HTMLElement).outerHTML : node2.textContent || "";
    const right = `<span id="change-${changeIndexRef.value}" class="diff-change bg-green-200">${html}</span>`;
    changeIndexRef.value++;
    return { left: "", right };
  }

  return null;
}

function diffText(
  text1: string,
  text2: string,
  changeIndexRef: { value: number }
): { left: string; right: string } {
  text1 = normalizeText(text1);
  text2 = normalizeText(text2);

  if (text1 === text2) {
    return { left: text1, right: text2 };
  }

  const diffs = dmp.diff_main(text1, text2);
  dmp.diff_cleanupSemantic(diffs);

  let left = "",
    right = "";

  diffs.forEach(([op, data]) => {
    if (op === diff_match_patch.DIFF_EQUAL) {
      left += data;
      right += data;
    } else if (op === diff_match_patch.DIFF_DELETE) {
      left += `<span id="change-${changeIndexRef.value}" class="diff-change bg-red-200">${data}</span>`;
    } else if (op === diff_match_patch.DIFF_INSERT) {
      right += `<span id="change-${changeIndexRef.value}" class="diff-change bg-green-200">${data}</span>`;
    }
  });

  changeIndexRef.value++;
  return { left, right };
}

export function diffHtmlPreserveAll(html1: string, html2: string) {
  const parser = new DOMParser();
  const doc1 = parser.parseFromString(html1, "text/html");
  const doc2 = parser.parseFromString(html2, "text/html");

  const changeIndexRef = { value: 0 };
  const { left, right } = diffChildren(doc1.body.childNodes, doc2.body.childNodes, changeIndexRef);

  return { left, right, hasChanges: changeIndexRef.value > 0 };
}
