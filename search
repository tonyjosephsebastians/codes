import React, { useState, useEffect, useRef } from "react";
import WordDocumentPreview from "./WordDocumentPreview";

const DocumentViewer = ({
  parsedDocument,
  file,
  showDiff = false,
  baselineArrayBuffer = null,
}: any) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [matches, setMatches] = useState<HTMLElement[]>([]);
  const [currentMatchIndex, setCurrentMatchIndex] = useState(0);
  const [pageCount, setPageCount] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);

  const containerRef = useRef<HTMLDivElement>(null);

  // 🧾 Render document pages and setup page counter
  useEffect(() => {
    if (!containerRef.current) return;
    const container = containerRef.current;
    const pages = container.querySelectorAll("section.docx");
    setPageCount(pages.length);

    const handleScroll = () => {
      const scrollTop = container.scrollTop;
      let current = 1;
      pages.forEach((page, idx) => {
        if (page.offsetTop - 200 <= scrollTop) current = idx + 1;
      });
      setCurrentPage(current);
    };

    container.addEventListener("scroll", handleScroll);
    return () => container.removeEventListener("scroll", handleScroll);
  }, [parsedDocument]);

  // 🔍 Handle search
  const handleSearch = (query: string) => {
    setSearchTerm(query);
    if (!containerRef.current) return;

    // Remove old highlights
    containerRef.current.querySelectorAll(".highlight").forEach((el) => {
      el.replaceWith(document.createTextNode(el.textContent || ""));
    });

    if (!query.trim()) {
      setMatches([]);
      return;
    }

    const regex = new RegExp(query, "gi");
    const walker = document.createTreeWalker(containerRef.current, NodeFilter.SHOW_TEXT);
    const newMatches: HTMLElement[] = [];

    while (walker.nextNode()) {
      const node = walker.currentNode as Text;
      if (node.nodeValue && regex.test(node.nodeValue)) {
        const span = document.createElement("span");
        span.innerHTML = node.nodeValue.replace(
          regex,
          (match) => `<mark class="highlight bg-yellow-300 text-black">${match}</mark>`
        );
        node.parentNode?.replaceChild(span, node);
        newMatches.push(span);
      }
    }

    setMatches(newMatches);
    setCurrentMatchIndex(0);

    if (newMatches.length > 0) {
      newMatches[0].scrollIntoView({ behavior: "smooth", block: "center" });
    }
  };

  const goNext = () => {
    if (!matches.length) return;
    const next = (currentMatchIndex + 1) % matches.length;
    setCurrentMatchIndex(next);
    matches[next].scrollIntoView({ behavior: "smooth", block: "center" });
  };

  const goPrev = () => {
    if (!matches.length) return;
    const prev = (currentMatchIndex - 1 + matches.length) % matches.length;
    setCurrentMatchIndex(prev);
    matches[prev].scrollIntoView({ behavior: "smooth", block: "center" });
  };

  return (
    <div className="flex flex-col h-full bg-white relative">
      {/* 🔍 Search Bar */}
      <div className="flex items-center gap-2 p-2 border-b bg-gray-50 z-10">
        <input
          type="text"
          value={searchTerm}
          onChange={(e) => handleSearch(e.target.value)}
          placeholder="Search in document..."
          onKeyDown={(e) => e.key === "Enter" && goNext()}
          className="border rounded px-2 py-1 flex-1 text-sm"
        />
        <button
          className="px-2 py-1 border rounded text-sm"
          onClick={goPrev}
          disabled={!matches.length}
        >
          Prev
        </button>
        <button
          className="px-2 py-1 border rounded text-sm"
          onClick={goNext}
          disabled={!matches.length}
        >
          Next
        </button>
        <span className="text-xs text-gray-500">
          {matches.length > 0 ? `${currentMatchIndex + 1}/${matches.length}` : "0/0"}
        </span>
      </div>

      {/* 🧾 Document Viewer */}
      <div ref={containerRef} className="flex-1 overflow-y-auto bg-white relative">
        <WordDocumentPreview arrayBuffer={parsedDocument?.originalContent} />
      </div>

      {/* 📄 Page Counter */}
      <div className="absolute bottom-2 right-4 bg-white/80 px-3 py-1 border rounded text-xs text-gray-600 shadow">
        Page {currentPage}/{pageCount || 1}
      </div>
    </div>
  );
};

export default DocumentViewer;
