import uuid
from datetime import datetime
from sqlalchemy import Column, String, DateTime
from app.database import Base

class Project(Base):
    __tablename__ = "projects"
    __table_args__ = {"schema": "dbo"}   # ensure dbo schema in Azure SQL

    id = Column(String, primary_key=True, default=lambda: str(uuid.uuid4()))
    username = Column(String, nullable=False, index=True)   # <-- NEW column
    name = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    last_modified = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.config import settings

# Create SQLAlchemy engine for Azure SQL
engine = create_engine(
    settings.DATABASE_URL,
    pool_pre_ping=True,   # helps avoid stale connections
)

# Session factory
SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine
)

# Base class for ORM models
Base = declarative_base()

# Dependency for FastAPI
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


class Settings(BaseSettings):
    DATABASE_URL: str = (
        "mssql+pyodbc://@{server}/{db}"
        "?driver=ODBC+Driver+18+for+SQL+Server"
        "&authentication=ActiveDirectoryMsi"
    ).format(
        server="d4003-eastus2-asql-727.database.windows.net",
        db="daas-kmai-kmai-ent07-devdb"
    )

class Settings(BaseSettings):
    DATABASE_URL: str = (
        "mssql+pyodbc://@d4003-eastus2-asql-727.database.windows.net/"
        "daas-kmai-kmai-ent07-devdb"
        "?driver=ODBC+Driver+18+for+SQL+Server"
        "&authentication=ActiveDirectoryMsi"
        "&Encrypt=yes"
    )

class Settings(BaseSettings):
    DATABASE_URL: str = (
        "mssql+pyodbc://@d4003-eastus2-asql-727.database.windows.net/daas-kmai-kmai-ent07-devdb"
        "?driver=ODBC+Driver+18+for+SQL+Server"
        "&authentication=ActiveDirectoryMsi"



    )



from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.config import settings

# Azure SQL engine with Managed Identity
engine = create_engine(
    settings.DATABASE_URL,
    pool_pre_ping=True  # checks connections before using
)

# Session factory
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base class for models
Base = declarative_base()

# Dependency for FastAPI
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()




# Database
DATABASE_URL=mssql+pyodbc://@d4003-eastus2-asql-727.database.windows.net/daas-kmai-kmai-ent07-devdb?driver=ODBC+Driver+18+for+SQL+Server&authentication=ActiveDirectoryMsi&Encrypt=yes

DATABASE_URL=mssql+pyodbc://@d4003-eastus2-asql-727.database.windows.net/daas-kmai-kmai-ent07-devdb?driver=ODBC+Driver+18+for+SQL+Server&authentication=ActiveDirectoryMsi&Encrypt=yes&UID=2ac65c34-a1dc-4163-a579-76ff1791f370

