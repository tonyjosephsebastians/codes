import { diff_match_patch } from "diff-match-patch";
const dmp = new diff_match_patch();

function diffHtmlPreserveFormatting(html1: string, html2: string) {
  const parser = new DOMParser();
  const doc1 = parser.parseFromString(html1, "text/html");
  const doc2 = parser.parseFromString(html2, "text/html");

  const walker1 = doc1.createTreeWalker(doc1.body, NodeFilter.SHOW_TEXT);
  const walker2 = doc2.createTreeWalker(doc2.body, NodeFilter.SHOW_TEXT);

  let textNode1: Node | null;
  let textNode2: Node | null;
  let changeIndex = 0;

  while ((textNode1 = walker1.nextNode()) && (textNode2 = walker2.nextNode())) {
    const diffs = dmp.diff_main(textNode1.textContent || "", textNode2.textContent || "");
    dmp.diff_cleanupSemantic(diffs);

    // rebuild node content with <span>
    const new1 = diffs.map(([op, data]) => {
      if (op === diff_match_patch.DIFF_DELETE) {
        return `<span id="change-${changeIndex}" class="diff-change bg-red-200">${data}</span>`;
      }
      return data;
    }).join("");

    const new2 = diffs.map(([op, data]) => {
      if (op === diff_match_patch.DIFF_INSERT) {
        return `<span id="change-${changeIndex++}" class="diff-change bg-green-200">${data}</span>`;
      }
      return data;
    }).join("");

    textNode1.parentElement!.innerHTML = new1;
    textNode2.parentElement!.innerHTML = new2;
  }

  return {
    left: doc1.body.innerHTML,
    right: doc2.body.innerHTML,
  };
}
const handleDiff = () => {
  if (!parsedDocuments.original?.html || !parsedDocuments.comparison?.html) return;

  const { left, right } = diffHtmlPreserveFormatting(
    parsedDocuments.original.html,
    parsedDocuments.comparison.html
  );

  setParsedDocuments((prev) => ({
    ...prev,
    original: { ...prev.original, html: left },
    comparison: { ...prev.comparison, html: right },
  }));

  setCurrentChangeIndex(0);
};
