#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv, io, os, re

INPUT  = "variables.csv"
OUTPUT = "variables_clean.csv"

# regex: first identifier-like token
RE_TOK = re.compile(r"[A-Za-z0-9_-]+")

def first_token(s: str) -> str:
    if not s:
        return ""
    m = RE_TOK.search(s)
    return m.group(0).upper() if m else ""

def main():
    if not os.path.exists(INPUT):
        print(f"ERROR: {INPUT} not found in {os.getcwd()}")
        return

    with io.open(INPUT, newline="", encoding="utf-8") as f_in:
        reader = csv.DictReader(f_in)
        fieldnames = reader.fieldnames or []
        # find exact header for assign_target (case-insensitive)
        name_map = {k.lower(): k for k in fieldnames}
        at_col = name_map.get("assign_target")
        if not at_col:
            print("ERROR: 'assign_target' column not found (check header name).")
            return

        rows_out = []
        dropped = 0
        cleaned = 0

        for r in reader:
            orig = r.get(at_col, "").strip()
            if ";" in orig:        # multiple assign targets â†’ drop row
                dropped += 1
                continue
            if orig:
                cleaned_val = first_token(orig)
                if cleaned_val != orig:
                    cleaned += 1
                r[at_col] = cleaned_val
            rows_out.append(r)

    with io.open(OUTPUT, "w", newline="", encoding="utf-8") as f_out:
        writer = csv.DictWriter(f_out, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(rows_out)

    print(f"Done. Wrote {OUTPUT}  (cleaned {cleaned} rows, dropped {dropped} rows).")

if __name__ == "__main__":
    main()
